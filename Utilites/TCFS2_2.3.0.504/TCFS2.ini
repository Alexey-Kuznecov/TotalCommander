[Items]
; Команды
; Id=apply_cmd1(...) [apply_cmd2(...) ...] [, check_cmd(...) [, undo_id1 [undo_id2 ...] [, undo_check_cmd(...)]]] [| apply_cmdN(...) ...] [; Описание]
; Допустимо указывать несколько командных строк для одного id, разделяя их символом '|' - выполнена будет только одна (первая безусловная или с истинным условием)
mm1=tcm(65537)
mm0=tcm(65538)
mm2=tcm(65539)
mm_track=tcm(65540)
set_separator=msg($433, 65562, #1)
regwrite=msg(regmsg(TCFS2.RegWrite), #1, #2)

; Команды управления окном
m0=show(9), eval(isMaximized), m1					; Восстановить
m1=show(3), eval(!isMaximized), m0					; Развернуть
m2=show(isMaximized ? 9 : 3), , m2					; Развернуть/Восстановить
c0=set_style(# & ~$00C00000), eval(hasCaption), c1	; Скрыть заголовок
c1=set_style(# | $00C00000), eval(!hasCaption), c0	; Показать заголовок
c2=set_style(# ^ $00C00000), , c2					; Переключить заголовок
t0=move(, , , , 0), eval(isTopmost), t1				; Выключить режим поверх всех окон
t1=move(, , , , 1), eval(!isTopmost), t0			; Включить режим поверх всех окон
t2=move(, , , , isTopmost ? 0 : 1), , t2			; Переключить режим поверх всех окон
locktc=msg($0B, #1-0 > 0 ? 0 : 1, 0)				; Запретить/разрешить перерисовку окна ТК (1 или 0 в параметре)
redraw=redraw()										; Полностью перерисовать окно ТК
update=redraw() tcm(2918)							; Перерисовать окно ТК и курсор в активной панели (он может исчезать после блокировки перерисовки)


; Встроенные команды ТК
rr=tcm(540)											; Обновить окно
tb0=tcm(2901), eval(hasButtonBar), tb1				; Скрыть панель инструментов
tb1=tcm(2901), eval(!hasButtonBar), tb0				; Показать панель инструментов
db0=tcm(2902), eval(hasDriveBar), db1				; Скрыть панель кнопок дисков
db1=tcm(2902), eval(!hasDriveBar), db0				; Показать панель кнопок дисков
2b0=tcm(2903), eval(hasDriveBar2), 2b1				; Использовать одну панель кнопок дисков
2b1=tcm(2903), eval(!hasDriveBar2), 2b0				; Использовать две панели кнопок дисков
dc0=tcm(2906), eval(hasDriveCombo), dc1				; Скрыть окно выбора дисков
dc1=tcm(2906), eval(!hasDriveCombo), dc0			; Показать окно выбора дисков
dt0=tcm(2916), eval(hasDirTabs), dt1				; Отключить вкладки каталогов (при закрытии ТК все вкладки исчезнут!)
dt1=tcm(2916), eval(!hasDirTabs), dt0				; Включить вкладки каталогов
cd0=tcm(2907), eval(hasPathHeader), cd1				; Скрыть заголовки текущих путей
cd1=tcm(2907), eval(!hasPathHeader), cd0			; Показать заголовки текущих путей
th0=tcm(2908), eval(hasTabHeader), th1				; Скрыть заголовки табуляторов
th1=tcm(2908), eval(!hasTabHeader), th0				; Показать заголовки табуляторов
sb0=tcm(2909), eval(hasStatusBar), sb1				; Скрыть строку состояния
sb1=tcm(2909), eval(!hasStatusBar), sb0				; Показать строку состояния
cl0=tcm(2910), eval(hasCmdLine), cl1				; Скрыть командную строку
cl1=tcm(2910), eval(!hasCmdLine), cl0				; Показать командную строку
kb0=tcm(2911), eval(hasKeyButtons), kb1				; Скрыть кнопки функциональных клавиш
kb1=tcm(2911), eval(!hasKeyButtons), kb0			; Показать кнопки функциональных клавиш


; Примеры перемещения окна
r1=move(, , 800, 600)									; Изменить размер окна на 800x600
r2=move(0, 0, , )										; Переместить окно на позицию (0, 0)
r3=move(#-100, , #+100)									; Растянуть окно влево на 100 пикселей
r4=move(, #+100)										; Опустить окно на 100 пикселей
r5=move(@-800, 0, 800, 600)								; Изменить размер окна на 800x600 и поместить в верхний правый угол экрана
r6=move(0, 0, @, @-4)									; Установить ширину окна по ширине экрана, а высоту - по высоте экрана минус 4 пикселя
r7=move(@*2/10+1, cyWorkArea-@*7/10+1, @*8/10, @*7/10)	; Поместить окно в правый нижний угол с размерами 0.8 от ширины и 0.7 от высоты экрана

switch_sp=move(# ? 0 : @*7/64, # ? 0 : @*7/64, @-# ? @ : @*25/32, cyWorkArea-# ? cyWorkArea : @*25/32), , switch_sp	; Переключить между большим и средним размером окна
sys_move=msg($0112, $F010, 0, 1) msg($0100, $26, $01000001, 1) msg($0101, $26, $C1000001, 1)						; Послать команду "Перместить" системного меню


; Вспомогательные команды
fs2=if(hasCaption, locktc(1) + run_action(fs) + locktc(0) + show(3) + save_undo(fs_undo), show(9) + locktc(1) + run_action(fs_undo) + locktc(0)) run_item(update)	; Переключить в полноэкранный режим, вызвав действие fs (если заголовок окна ТК не скрыт), или выполнить действие отката fs_undo
cfixm0=, eval(isMaximized) | if(hasCaption, move(#-1, #-cyCaption-1, #+2, #+cyCaption+2), move(#+1, #+cyCaption+1, #-2, #-cyCaption-2)), , cfixm0					; Переместить окно после переключения заголовка, чтобы сохранить позицию клиентской области (если окно не развернуто)
cfixm1=run_item(update), eval(isMaximized), cfixm1																													; Обновить окно после изменения стилей (если окно развернуто)

bb_inc=tcm(2901) set_tcini(Buttonbar,Buttonheight,#+1) tcm(2901), tcini(Layout,ButtonBar,1,1), bb_dec | set_tcini(Buttonbar,Buttonheight,#+1) tcm(2901), , bb_dec	; Увеличить размер кнопок панели инструментов на 1 пиксель
bb_dec=tcm(2901) set_tcini(Buttonbar,Buttonheight,#-1) tcm(2901), tcini(Layout,ButtonBar,1,1), bb_inc | set_tcini(Buttonbar,Buttonheight,#-1) tcm(2901), , bb_inc	; Уменьшить размер кнопок панели инструментов на 1 пиксель

multi_send=if(!null(#2), send(#2, #1) + run_item(#0, #1, #3, #4, #5, #6, #7, #8, #9))																				; Последовательно послать окну с помощью функции send до 8 строк (в параметрах указываются дескриптор окна и 1-8 строк через запятую)

switch_ignore_list=if(isIgnoreListEnabled, tcm(2922)+set_tcini(Configuration,IgnoreListFile,#1)+tcm(2922), set_tcini(Configuration,IgnoreListFile,#1))				; Сменить список исключений на указанный (если опция была выключена, она будет включена после смены списка)


; Команды для перемещения разделителя файловых панелей (необходим активный TCFS2Tools.dll)
set_separator=msg($0433, tt_SeparatorSet, #1)							; Установить разделитель в указанную позицию (использует один параметр)
sp_set_active=run_item(set_separator, L_isActive ? (#1) : 100 - (#1))	; Задать указанную ширину активной панели (использует один параметр)

sp_move=run_item(set_separator, -1)										; Переместить разделитель, двигая мышь (щелчок мыши закрепляет позицию)
sp_inc=run_item(set_separator, sepPos+10)
sp_dec=run_item(set_separator, sepPos-10)
sp_inc_r=run_item(set_separator, if(sepPos > 80, 20, sepPos + 20))		; Увеличить положение разделитель на 20%, или устанавливает 20%, если оно достигло 80%

sp_set0=run_item(set_separator, 0)										; Установить положение разделитель в 0%
sp_set20=run_item(set_separator, 20)
sp_set40=run_item(set_separator, 40)
sp_set60=run_item(set_separator, 60)
sp_set80=run_item(set_separator, 80)
sp_set100=run_item(set_separator, 100)									; Установить положение разделитель в 100%


; Команды управления главным меню (необходим активный TCFS2Tools.dll)
mm0=tcm(tt_HideMainMenu)												; Скрыть строку главного меню
mm1=tcm(tt_ShowMainMenu)												; Показать строку главного меню
mm2=tcm(tt_SwitchMainMenu)												; Переключить строку главного меню
mm_track=tcm(tt_TrackMainMenu)											; Открыть главное меню в виде всплывающего


; Команды для переключения режимов панелей и прокрутки (необходим активный TCFS2Tools.dll)
switch_viewmode_L=set_tcini(left, LastViewMode, L_viewMode) tcm(#1), eval(L_viewMode != (#1)) | tcm(tcini(left, LastViewMode, #))	; Переключить между заданным в параметре и предыдущим режимом левой панели
switch_viewmode_R=set_tcini(right, LastViewMode, R_viewMode) tcm(#1), eval(R_viewMode != (#1)) | tcm(tcini(right, LastViewMode, #))	; Переключить между заданным в параметре и предыдущим режимом правой панели
switch_viewmode_S=run_item(switch_viewmode_L, #1-200), eval(L_isActive) | run_item(switch_viewmode_R, #1-100)						; Переключить между заданным в параметре и предыдущим режимом активной панели

scroll_list_h=loop(@<=(if(#2>0,#2,-#2)) + 0*sendmsg(msg(WM_TC_COMMAND, tt_GetPanel, #1), $114, if(#2>0,3,2), 0))					; Прокрутить список вправо/влево на заданное число страниц. Первый параметр: 1 - левая панель, 2 - правая; второй - число страниц
scroll_list_v=loop(@<=(if(#2>0,#2,-#2)) + 0*sendmsg(msg(WM_TC_COMMAND, tt_GetPanel, #1), $115, if(#2>0,3,2), 0))					; Прокрутить список вверх/вниз на заданное число страниц. Первый параметр: 1 - левая панель, 2 - правая; второй - число страниц
scroll_list=if(#1==2 ? R_viewMode==201 : L_viewMode==101, run_item(scroll_list_h, #1, #2), run_item(scroll_list_v, #1, #2))			; Прокрутить список на заданное число страниц. Первый параметр: 1 - левая панель, 2 - правая; второй - число страниц


; Встроенные функции и параметры:
;
; 0
; 1
; if(<condition>, [<true_expression>], [<false_expression>])
; loop(<expression>)
; null(<something>)
; eval(<expression>)
; style([<value>], [<exvalue>])
; tcini(<section>, <key>, <value>|`<string_value>`, [<error_value>], [<flags>])
; ini(`<ini_file>`, <section>, <key>, <value>|`<string_value>`, [<error_value>], [<flags>])
; msg(<umsg>, <wparam>, <lparam>, [<async_mode>])
; regmsg(<msg_name>)
; findwnd([`<class>`], [`<text>`], [<parent>], [<zindex>])
; tcd([`<left_path>`], [`<right_path>`], [S][T], [<async_mode>])
; tcm(<cm_index>, [<async_mode>])
; tem(`<em_command_name> [<parameters>]`, [<async_mode>])
; send([@]`<keystrokes>`, [<hwnd>])
; sendmsg(<hwnd>, <umsg>, <wparam>, <lparam>, [<async_mode>])
; varcnt()
; varget(<n>)
; varset(<n>, <x>)
;
; show(<state>)
; move([<x>], [<y>], [<cx>], [<cy>], [<topmost>])
; redraw()
; run_item(<item_name>, [<params>])
; run_action(<action_name>)
; set_style([<value>], [<exvalue>])
; set_tcini(<section>, <key>, [<value>]|`<string_value>`, [<error_value>], [<flags>])
; set_ini(`<inipath>`, <section>, <key>, [<value>]|`<string_value>`, [<error_value>])
; save_undo(<undo_name>)
; delay(<msec>)

; Встроенные макросы:
;
; @sid


[Macros]
sepPos=msg($433, 65561)
L_isActive=tcm(65551)
L_viewMode=tcm(65553)
cxScreen=msg($433, 65570, 0)
cxWorkArea=msg($433, 65571, 0)
pressedShift=msg($433, 65572, $10) < 0
regread=msg(regmsg(TCFS2.RegRead), #1, #2-0)

; Некоторые константы для функции show
SW_HIDE=0
SW_SHOWMAXIMIZED=3
SW_MINIMIZE=6
SW_RESTORE=9

; Некоторые константы для функций style/set_style
WS_CAPTION=$00C00000		; Окно имеет заголовок
WS_MAXIMIZE=$01000000		; Окно развёрнуто
WS_VISIBLE=$10000000		; Окно видимо
WS_MINIMIZE=$20000000		; Окно свёрнуто
WS_EX_TOPMOST=$00000008		; Окно поверх других окон
WS_EX_TOOLWINDOW=$00000080	; Окно имеет узкий заголовок и не имеет кнопки на панели задач

; Некоторые константы для функции msg
WM_TC_COMMAND=$0433		; Посылает внутреннюю команду ТК (внутреннее сообщение ТК)
WM_SETREDRAW=$0B		; Разрешает/запрещает перерисовку окна
WM_KEYDOWN=$0100		; Имитирует зажатие клавиши
WM_KEYUP=$0101			; Имитирует отпускание клавиши
WM_SYSCOMMAND=$0112		; Посылает специальную команду из системного меню окна

; Некоторые виртуальные коды клавиш
VK_CONTROL=$11	; Control
VK_ESCAPE=$1B	; Escape
VK_LBUTTON=$1	; Left mouse button
VK_RBUTTON=$2	; Right mouse button
VK_MBUTTON=$4	; Middle mouse button
VK_MENU=$12		; Alt
VK_SHIFT=$10	; Shift

; Флаги для функций tcini/set_tcini/ini
ini_Redirection=$1
ini_StrCmpCase=$8000

; Некоторые вспомогательные функции
if_empty=if(null(#1), #2, #1)														; Возвращает первый параметр, если он не пуст, иначе - второй - значение параметра по умолчанию
wait_for=loop(@<=(#2) && if(#1, 0, delay(1000)))									; Ожидает, пока условие не станет истинным, проверяя раз в секунду. Первый параметр - условие, второй - число секунд ожидания
send_wait=loop(@<=if_empty(#3,5)*20 && if(#2,sendmsg(#2)*send(#1,#2)*0,delay(50)))	; Ожидает появления окна и отправляет ему нажатия клавиш. Первые два параметра - как у функции send, третий - число секунд (по умолчанию 5)
locktc=msg($0B, #1-0 > 0 ? 0 : 1, 0)												; Запретить/разрешить перерисовку окна ТК (1 или 0 в параметре)

; Некоторые функции для проверки состояния окна
hasButtonBar=tcini(Layout, ButtonBar, 1, 1)	; Истина, если панель инструментов не отключена в wincmd.ini
hasDriveBar=tcini(Layout, DriveBar1, 1)		; Истина, если панель кнопок дисков не отключена в wincmd.ini
hasDriveBar2=tcini(Layout, DriveBar2, 1)	; Истина, если в wincmd.ini включено использование двух панелей кнопок дисков
hasDriveCombo=tcini(Layout, DriveCombo, 1)
hasDirTabs=tcini(Layout, DirectoryTabs, 1)
hasPathHeader=tcini(Layout, CurDir, 1)
hasTabHeader=tcini(Layout, TabHeader, 1)
hasStatusBar=tcini(Layout, StatusBar, 1)
hasCmdLine=tcini(Layout, CmdLine, 1)
hasKeyButtons=tcini(Layout, KeyButtons, 1)

hasCaption=style(# & $00C00000)
isMaximized=style(# & $01000000)
isTopmost=style(, # & $08)

; Параметры конфигурации
isIgnoreListEnabled=tcini(Configuration, IgnoreListFileEnabled, 1, 1)

; Некоторые номера команд TCFS2Tools (могут быть изменены в TCFS2Tools.ini)
tt_ShowMainMenu=65537
tt_HideMainMenu=65538
tt_SwitchMainMenu=65539
tt_TrackMainMenu=65540
tt_GetWindowMetrics=65550
tt_LeftIsActive=65551
tt_RightIsActive=65552
tt_LeftGetViewMode=65553
tt_RightGetViewMode=65554
tt_IsVerticalPanels=65555
tt_GetPanel=65556
tt_SeparatorGet=65561
tt_SeparatorSet=65562
tt_GetSystemMetrics=65570
tt_GetWorkArea=65571
tt_GetAsyncKeyState=65572
tt_GetSomeInfo=65573
tt_LeftTabIndex=65580
tt_RightTabIndex=65581
tt_LeftTabCount=65582
tt_RightTabCount=65583
tt_LeftTabSetIndex=65584
tt_RightTabSetIndex=65585
tt_LeftTabIsLocked=65586
tt_RightTabIsLocked=65587
tt_RegRead=regmsg(TCFS2.RegRead)
tt_RegWrite=regmsg(TCFS2.RegWrite)
tt_RegCount=regmsg(TCFS2.RegCount)

; Некоторые команды, возвращающие информацию (необходим активный TCFS2Tools.dll)
GetSystemMetrics=msg($433, tt_GetSystemMetrics, #1)	; Возвращает системное значение с индексом, указанным в параметре
GetAsyncKeyState=msg($433, tt_GetAsyncKeyState, #1)	; Возвращает состояние виртуальной клавиши, код которой указан в параметре
GetTickCount=msg($433, tt_GetSomeInfo, 0)			; Возвращает количество миллисекунд с момента загрузки Windows

cyCaption=msg($433, tt_GetSystemMetrics, 4)	; Высота заголовка окна
cxWorkArea=msg($433, tt_GetWorkArea, 0)		; Ширина рабочей области экрана (без панели задач)
cyWorkArea=msg($433, tt_GetWorkArea, 1)		; Высота рабочей области экрана (без панели задач)
xWorkArea=msg($433, tt_GetWorkArea, 2)		; Горизонтальная позиция рабочей области экрана (без панели задач)
yWorkArea=msg($433, tt_GetWorkArea, 3)		; Вертикальная позиция рабочей области экрана (без панели задач)
cxScreen=GetSystemMetrics(0)				; Ширина основного экрана
cyScreen=GetSystemMetrics(1)				; Высота основного экрана

pressedShift=msg($433, tt_GetAsyncKeyState, $10) < 0	; Истина, если Shift зажата в данный момент
pressedCtrl=msg($433, tt_GetAsyncKeyState, $11) < 0
pressedAlt=msg($433, tt_GetAsyncKeyState, $12) < 0
pressedRButton=msg($433, tt_GetAsyncKeyState, $2) < 0
pressedMButton=msg($433, tt_GetAsyncKeyState, $4) < 0

xTcWindow=msg($433, tt_GetWindowMetrics, 0)		; Координата X окна ТК
yTcWindow=msg($433, tt_GetWindowMetrics, 1)		; Координата Y окна ТК
wTcWindow=msg($433, tt_GetWindowMetrics, 2)		; Ширина окна ТК
hTcWindow=msg($433, tt_GetWindowMetrics, 3)		; Высота окна ТК
xTcWindowCli=msg($433, tt_GetWindowMetrics, 4)	; Координата X клиентской части окна ТК (без заголовка, меню и границ)
yTcWindowCli=msg($433, tt_GetWindowMetrics, 5)	; Координата Y клиентской части окна ТК
wTcWindowCli=msg($433, tt_GetWindowMetrics, 6)	; Ширина клиентской части окна ТК
hTcWindowCli=msg($433, tt_GetWindowMetrics, 7)	; Высота клиентской части окна ТК

isVerticalPanels=msg($433, tt_IsVerticalPanels)				; Истина, если панели отображаются одна над другой
sepPos=msg($433, tt_SeparatorGet)							; Текущая позиция разделителя файловых панелей
L_isActive=tcm(tt_LeftIsActive)								; Истина, если левая панель активна
R_isActive=tcm(tt_RightIsActive)							; Истина, если правая панель активна
L_viewMode=tcm(tt_LeftGetViewMode)							; Возвращает команду cm_Left* для текущего режима левой панели
R_viewMode=tcm(tt_RightGetViewMode)							; Возвращает команду cm_Right* для текущего режима правой панели
S_viewMode=if(L_isActive, L_viewMode+200, R_viewMode+100)	; Возвращает команду cm_Src* для текущего режима активной панели

; Команды для чтения/записи регистров TCFS2Tools
regread=msg(tt_RegRead, #1, #2-0)							; Возвращает значение, записанное в регистр с указанным в первом параметре адресом, или значение второго параметра при ошибке
regwrite=msg(tt_RegWrite, #1, #2)							; Сохраняет значение из второго параметра в регистре с адресом, указанным в первом параметре; возвращает адрес или 0, если адрес неверный
regcount=msg(tt_RegCount)									; Возвращает число доступных регистров хранения


[Actions]
; Действия
; Имя=Id1 Id2 Id3 ... [														; Описание		]
; "Undo" - это встроенный элемент, содержащий список команд для отмены последнего действия
fs=c0 db0 dc0 cd0 th0 sb0 cl0 kb0
fs2=fs2																		; Реверсивный переключатель полноэкранного режима (вызывает действие fs или fs_undo)
title_switch=c2 cfixm0 cfixm1												; Переключает заголовок и перемещает окно, чтобы сохранить позицию клиентской области (если окно не развернуто)
begin_move=sys_move															; Позволяет быстро переместить окно мышью даже при отключенном заголовке
fs_undo=c1 db1 cd1 th1 sb1 cl1
Undo=
